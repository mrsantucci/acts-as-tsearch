ActsAsTsearch
=============

This allows easy implementation of TSearch2 using the familiar "act_as" format.



OMG is this ugly... I suck at technical writing...  send inquires, hate mail and "you suck at ruby" messages to wiseleyb@gmail.com - better to include fixes with "you suck" messages  :)

Unit Testing?  Not yet... coming soon.

** This is very rough right now ... we're using it in production but it's not that user friendly yet...

This is Postgresql specific and definitely won't run on any other database.

Documentation on TSearch2 can be found at: http://www.sai.msu.su/~megera/postgres/gist/tsearch/V2/ 

TODO:  Need to move this to Rake or something

INSTALLING TSEARCH2
===========================================================================
I've only done this on two computers so far... but here's the general idea...  

Tsearch comes with Postgres now.  From terminal try a "locate tsearch2.sql".  If nothing is found then you need
recompile postgres.  More information on that coming.

If you found tsearch2.sql then you just need to do this:
>> su postgres  (or su root, then su postgres - if you don't know the postgres password)
>> psql your_database_name < tsearch2.sql
>> psql your_database_name
	grant all on public.pg_ts_cfg to username_you_connect_with_from_rails_database_yml_file;
	grant all on public.pg_ts_cfgmap to username_you_connect_with_from_rails_database_yml_file;
	grant all on public.pg_ts_dict to username_you_connect_with_from_rails_database_yml_file;
	grant all on public.pg_ts_parser to username_you_connect_with_from_rails_database_yml_file;



HOW TO USE
===========================================================================
There are three ways to use acts_as_tsearch...

We'll do this for the model Blog...

All of these searches come back with an extra column/method in your model containing the rank:  tsearch_rank.

The default SORT is by tsearch_rank

The default LIMIT is 100 rows

The index is updated whenever you save/update your model.


Simplest way - if you just want to search one column:

	class Blog < ActiveRecord::Base
		acts_as_tsearch :fields => "description"
	end
	
	Then do searches like this (returns the same thing you get back from a simple find(:all))
	Blog.find_by_tsearch("bob")  
	Will return all rows with the word "bob" in the description field
	
Still pretty simple - if you want to search multiple columns:
	class Blog < ActiveRecord::Base
		acts_as_tsearch :fields => ["title","description"]
	end

	Then do searches like this (returns the same thing you get back from a simple find(:all))
	Blog.find_by_tsearch("bob")  
	Will return all rows with the word "bob" in the title or description field

"Advanced" usage... weighted fields...
	*Note: the weighting defaults to 0.1, 0.2, 0.4, 1.0 - haven't implemented paying attention to "weights" yet - but will soon
	*Note II:  This only supports 4 weighting groups - there's a way to get around this but I have done it yet.

	class User < ActiveRecord::Base
		acts_as_tsearch :fields => {
			"a" => {:columns => [:first_name, :last_name, :company_name], :weight => 1.0},
			"b" => {:columns => [:short_description], :weight => 0.4},
			"c" => {:columns => [:state_name, :county_name, :city_name], :weight => 0.2},
			"d" => {:columns => [:about_me], :weight => 0.1}
		}
	end
	
	Searching is still simple:
	User.find_by_tsearch("bob")
	Will find all user rows with "bob" in the fields above and weight their relevance by the weight factor... so, first_name contains "bob" is more important than "about_me" containing "bob".  Again = the weights above are the only thing implemented right now, changing those weights will have no effect at this time.

"Super advanced" :)
	I tried to support ActiveRecord.find standards... here are some examples:
	
	Using advanced finds...on a base table Blogs.  Note: multiple table searches isn't yet implemented - but you can include other fields from other tables...
	options = {}
	options[:select] = "blogs.*, users.username"  #note - you must include blogs.* if you pass in :select
	options[:from] = "blogs, users"
	options[:conditions] = "blogs.user_id = users.id"
	options[:limit] = 10  #limit defaults to 100
	Blog.find_by_tsearch("bob", options)


	HEADLINES: are a cool thing that tsearch does... it returns a snippet of the text where the search term was found and <b>'s it... like:   "on a cold night <b>bob</b> licked a metal pole ... ".  
	Headlines are pretty expensive (db wise) so don't use them unless you really want them (this is why they're not default included)
	Example:  b = Blog.find_by_tsearch("bob",{}, [:title, :description])
	This will return columns like:
	b.title_headline and b.description_headline
	Note: These columns must be referenced in the acts_as_tsearch declaration.
	
	
	Query text:
	I wrote a very crude "convert to TSearch" query function (you can see how lame it is by looking at fix_tsearch_query in acts_as_tsearch.rb)
	Briefly - TSearch using !, &, | and () for searching.  This is covered here in depth: http://mira.sai.msu.su/~megera/pgsql/ftsdoc/fts-query.html
	
	If you don't want to use my lame fix_tsearch_query... just tell me so (this should probably be a config option... TODO)
	Blog.find_by_tsearch("bob|jim",{},[],false)  #will not run your query through the fix query thing.
	
	
	
IN DEPTH / GOTCHAS
===========================================================================
It's VERY IMPORTANT to run "vacuumdb -f your_database_name" often with this.  We're using this on tables with 500,00 thousand rows and have noticed serious slow downs when not doing this several times a day.

The code currently does an auto-setup (or tries to) if your table doesn't have the "vectors" column, it also builds the index and updates the vectors for all rows.  For very large tables this can take a while (like 10 minutes) so, when moving to production you probably want to do something like this in the migration (or your site will surely time out the first time someone searches).

	Blog.create_vector

If you think your index is incorrect you can always rerun with

	Blog.update_vector   or Blog.update_vector(row_id)
	

ERROR:  Can't find tsearch config by locale  (indepth: http://www.sai.msu.su/~megera/postgres/gist/tsearch/V2/docs/tsearch-V2-intro.html )
I don't fully understand this yet (haven't taken the time to read it all)... but this has to do with locale's missing.  Currently we're using "default".  You can see the locals availble to you by running:

	SELECT * from pg_ts_cfg;

You can insert new locals by:

	INSERT INTO pg_ts_cfg (ts_name, prs_name, locale)
   		VALUES ('default_english', 'default', 'en_US');

You can tell acts_as_tsearch to use a different local by doing this (in your model... needs to be a config value TODO)

	acts_as_tsearch :fields = "title", :tsearch_locale => "some-other-locale"
	
